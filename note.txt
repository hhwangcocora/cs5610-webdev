===========
Router - navigate to different pages, client side, never refresh page
angular-route.min.js
angular-route.min.js.map
Central controller knows what event to what page, instead of the page itself to know where the page is. (Design Pattern)
Use the url to remember the state. Back and Forward button still work.

===========
jQuery is an API to standarize browser, work directly with DOM
AngularJS creates a higher level abstraction, object-oriented model, it's never
aware of the specific DOM. If it finds jQuery already loaded, it'll use jQuery as its low level lib. It has its own low level lib.
Bootstrap.js does depend on jQuery

href="#/profile/{{username}}"
when('/profile/:user', {})     // path parameter to controller
$routeParams  // responsible to pass parameter to controller, create a map

======================
MEAN   
  ExpressJS (a popular node js lib), quickly create server, easy scale, prototyping
  AngularJS MVC Framework)
  Node
NodeJS
npm (package dependency management, equevalent to maven)
node js is a js interpreter and libraries
npm install express

require('express')  // equivalent to import
app.get('/', function (req, res) {
  res.send('aa');
  res.json(alice);
});
app.listen(3000)
app.use(express.static(__dirname + '/public'));

node ./serverApp.js

var bodyParser = require('body-parser')  // parse josn in the body
var multer = require('multer')    // multipart/form-data

====================
Openshift.com (google account)
====================
MongoDB  (NoSQL, not relational, object oriented)
  scalability
  redundancy
  huge data
  performance
  A little bit less strongly typed
Data model (json, object, relational) tools to converstion
client - server - persistent  (use json all 3 layers)

db - collection - document(json)

mongoose: a node js module for interacting with mongodb
Create a schema:  var formSchema = new mongoose.Schema({name: Stirng, date:Date})  // like a class
Create a collection: var form = mongoose.model("Form", formSchema) // the object who maintains the session with db, for a particular collection
var form1 = new Form({name: 'aa', date: new Date()});
form1.save()   // validate against the schema, and then insert to db
form.find(function(err, data){})
form.findById("", function(err, data){ data.name=''; data.save()})





